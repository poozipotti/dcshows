{"version":3,"sources":["actions/index.js","components/ShowListing/ShowLisitng.js","components/ShowList/ShowList.js","containers/TrackedShows.js","containers/UntrackedShows.js","components/TimelineNode/TimelineNode.js","components/TimelineConnector/TimeLineConnector.js","components/TimeLine/Timeline.js","containers/TimeFilter.js","components/NavBar/NavBar.js","components/App.js","reducers/shows.js","reducers/dates.js","reducers/index.js","sagas/ShowLocalStorage.js","sagas/index.js","serviceWorker.js","index.js"],"names":["requestToggleShow","headliner","currentlyTracked","type","ShowListing","props","onClick","style","color","tracked","className","otherBands","month","day","location","description","ShowList","display","shows","length","title","map","show","key","connect","state","filter","dispatch","parseInt","year","toString","padStart","dates","startDate","endDate","showWithinDateFilter","monthMap","1","2","3","4","5","6","7","8","9","10","11","12","TimelineNode","nodeClass","this","active","selectable","date","React","Component","TimelineConnector","Timeline","isActive","getOnClick","selectedDate","onClickConfirm","onClickSelect","index","Math","random","selected","getRequiredDates","showDates","sort","a","b","reduce","allDates","currentdate","numberOfMonths","slice","allDatesFilled","Array","fillDate","newMonth","selectDate","changeDate","TimeLine","Navbar","src","width","height","frameborder","allowtransparency","allow","TimeFilter","App","TrackedShows","UntrackedShows","initialShows","require","localStorage","getItem","trackShow","action","today","Date","initialDates","getMonth","getFullYear","Months","JSON","stringify","combineReducers","showLocalStorage","watchShowLocalStorage","setItem","put","takeEvery","rootSaga","all","Boolean","window","hostname","match","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","run","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8wEAKaA,G,MAAoB,SAACC,EAAUC,GAAX,MAAiC,CAChEC,KAAM,sBACNF,YACAC,sBCSaE,G,YAdK,SAAAC,GAChB,OACE,yBAAKC,QAASD,EAAMC,QAASC,MAAO,CAACC,MAAOH,EAAMI,QAAU,OAAO,SAAUC,UAAU,eACnF,4BAAKL,EAAMJ,WACX,2BAAII,EAAMM,YACV,2BAAIN,EAAMO,MAAV,IAAkBP,EAAMQ,KACxB,2BAAIR,EAAMS,UACV,2BACGT,EAAMU,gBCUJC,EAjBE,SAAAX,GACf,OACE,yBAAKE,MAAO,CAAEU,QAAUZ,EAAMa,MAAMC,OAAS,EAAI,UAAY,SAC3D,4BAAKd,EAAMe,OACX,yBAAKV,UAAU,mBACdL,EAAMa,OACLb,EAAMa,MAAMG,KAAI,SAAAC,GACd,OAAO,kBAAC,EAAD,eACLC,IAAKD,EAAKrB,WACNqB,EAFC,CAGLhB,QAAS,kBAAMD,EAAMC,QAAQgB,EAAKrB,UAAUqB,EAAKb,kBCA9Ce,eATS,SAAAC,GAAK,MAAK,CAChCP,MAAOO,EAAMP,MAAMQ,QAAO,SAACJ,GAAD,OAA2B,IAAjBA,EAAKb,WACzCW,MAAO,cAGkB,SAAAO,GAAQ,MAAK,CACtCrB,QAAS,SAACL,EAAUC,GAAX,OAAgCyB,EAAS3B,EAAkBC,EAAUC,QAGjEsB,CAGbR,GCKaQ,eATS,SAAAC,GAAK,MAAK,CAChCP,MAAOO,EAAMP,MAAMQ,QAAO,SAAAJ,GAAI,OAAqB,IAAjBA,EAAKb,SAVX,SAACa,EAAMG,GACnC,OACEG,SAASN,EAAKO,KAAO,GAAKP,EAAKV,MAAMkB,WAAWC,SAAS,EAAE,OACzDH,SAASH,EAAMO,MAAMC,UAAUJ,KAAO,GAAKJ,EAAMO,MAAMC,UAAUrB,MAAMkB,WAAWC,SAAS,EAAE,OAC/FH,SAASN,EAAKO,KAAO,GAAKP,EAAKV,QAC7BgB,SAASH,EAAMO,MAAME,QAAQL,KAAO,GAAKJ,EAAMO,MAAME,QAAQtB,MAAMkB,WAAWC,SAAS,EAAE,MAKjCI,CAAqBb,EAAKG,MACtFL,MAAO,gBAGkB,SAAAO,GAAQ,MAAK,CACtCrB,QAAS,SAACL,EAAUC,GAAX,OAAgCyB,EAAS3B,EAAkBC,EAAUC,QAGjEsB,CAGbR,G,uECvBIoB,G,MAAW,CACfC,EAAE,MACFC,EAAE,MACFC,EAAE,MACFC,EAAE,MACFC,EAAE,MACFC,EAAE,MACFC,EAAE,MACFC,EAAE,MACFC,EAAE,MACFC,GAAG,MACHC,GAAG,MACHC,GAAG,QAiBUC,E,iLAbX,IAAIC,EAAYC,KAAK9C,MAAM+C,OAAS,eAAiB,OAIrD,OAHGD,KAAK9C,MAAMgD,aACZH,GAAa,oBAGb,yBAAKxC,UAAW,gBAAiBJ,QAAS6C,KAAK9C,MAAMC,SACnD,yBAAKI,UAAWwC,IAChB,0BAAMxC,UAAU,aAAa0B,EAASe,KAAK9C,MAAMiD,KAAK1C,a,GATnC2C,IAAMC,WCPlBC,G,MANW,SAAApD,GACtB,OACI,yBAAKK,UAAU,WCuDRgD,EAvDE,SAAArD,GACf,IAAMsD,EAAW,SAAAL,GACf,OACGA,EAAK1C,QAAUP,EAAM4B,UAAUrB,OAC9B0C,EAAKzB,OAASxB,EAAM4B,UAAUJ,MAC/ByB,EAAK1C,QAAUP,EAAM6B,QAAQtB,OAC5B0C,EAAKzB,OAASxB,EAAM6B,QAAQL,MAG5B+B,EAAa,SAAAN,GAEjB,OAA0B,MAAtBjD,EAAMwD,aACD,WACLxD,EAAMyD,eAAeR,IAGhBK,EAASL,GACT,WACLjD,EAAM0D,cAAcT,IAGf,cAIX,OACE,yBAAK5C,UAAU,qBACZL,EAAM2B,OACL3B,EAAM2B,MAAMX,KAAI,SAACiC,EAAMU,GACrB,OACE,yBAAKtD,UAAU,oBAAoBa,IAAK+B,EAAK1C,MAAQ,IAAM0C,EAAKzB,MAC9D,kBAAC,EAAD,CACEN,IAAK+B,EAAK1C,MAAQ,IAAM0C,EAAKzB,KAAOoC,KAAKC,SACzCb,WAAkC,MAAtBhD,EAAMwD,aAClBT,OAAQO,EAASL,GACjBhD,QAASsD,EAAWN,GACpBa,SACE9D,EAAMwD,cACNP,EAAK1C,QAAUP,EAAMwD,aAAajD,OAClC0C,EAAKzB,OAASxB,EAAMwD,aAAahC,KAEnCyB,KAAMA,IAEPU,EAAQ3D,EAAM2B,MAAMb,OAAS,EAC5B,kBAAC,EAAD,CACEI,IAAK+B,EAAK1C,MAAQ,IAAM0C,EAAKzB,KAAO,IAAMoC,KAAKC,WAE/C,W,8NChDlB,IAAME,EAAmB,SAAA3C,GACvB,IAAI4C,EAAY5C,EAAMP,MACnBG,KAAI,SAAAC,GACH,MAAO,CACLV,MAAOU,EAAKV,MACZiB,KAAMP,EAAKO,SAGdyC,MAAK,SAACC,EAAGC,GACR,OAAO5C,SAAS2C,EAAE1C,KAAO,GAAK0C,EAAE3D,MAAMkB,WAAWC,SAAS,EAAE,MAAQH,SAAS4C,EAAE3C,KAAO,GAAK2C,EAAE5D,MAAMkB,WAAWC,SAAS,EAAE,MACrH,GACC,KAwBT,OAtBAsC,EAAY,CAACA,EAAU,GAAIA,EAAUA,EAAUlD,OAAS,IAAIsD,QAC1D,SAACC,EAAUC,GACT,GAAwB,IAApBD,EAASvD,OACX,MAAO,CAACwD,GAER,IAAIC,EACF,IAAMD,EAAY9C,KAAO6C,EAASG,OAAO,GAAG,GAAGhD,MACjD+C,GAAkBD,EAAY/D,MAAQ8D,EAASG,OAAO,GAAG,GAAGjE,MAC5D,IAAIkE,EAAiB,YAAI,IAAIC,MAAMH,IAAiBvD,KAClD,SAAC2D,EAAUhB,GACT,IAAIiB,EAAWP,EAASG,OAAO,GAAG,GAAGjE,MAAQoD,EAC7C,MAAO,CACLpD,MAAQqE,EAAW,GAAI,EACvBpD,KAAM6C,EAASG,OAAO,GAAG,GAAGhD,KAAOD,SAASqD,EAAW,QAI7D,MAAM,GAAN,mBAAWP,GAAX,YAAuBI,MAG3B,KAeWtD,eAVS,SAAAC,GAAK,O,yVAAA,EAC3BO,MAAOoC,EAAiB3C,IACrBA,EAAMO,UAGgB,SAAAL,GAAQ,MAAK,CACtCoC,cAAe,SAAAT,GAAI,OAAI3B,ERlCC,SAAA2B,GAAI,MAAK,CACjCnD,KAAM,cACNmD,QQgCgC4B,CAAW5B,KAC3CQ,eAAgB,SAAAR,GAAI,OAAI3B,ERjDA,SAAA2B,GAAI,MAAK,CACjCnD,KAAM,cACNmD,QQ+CiC6B,CAAW7B,QAG/B9B,CAGb4D,GC5BaC,EAvBC,WACd,OACE,6BACE,yBAAK3E,UAAU,UACb,wBAAIA,UAAU,eAAd,yBACA,yBAAKA,UAAU,cACb,4BACEU,MAAM,WACNkE,IAAI,2FACJC,MAAM,MACNC,OAAO,KACPC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,qBAGV,kBAACC,EAAD,OAEF,yBAAKlF,UAAU,oBCNNmF,MAVf,WACE,OACE,yBAAKnF,UAAU,OACb,kBAAC,EAAD,MACA,kBAACoF,EAAD,MACA,kBAACC,EAAD,Q,yjBCXN,IAAMC,EAAeC,EAAQ,IAA2B5E,KAAI,SAAAC,GAG1D,OAAO,KACFA,EADL,CAEEb,QAAmD,SAA1CyF,aAAaC,QAAQ7E,EAAKrB,gBAKjCmG,EAAY,SAAAC,GAChB,OAAO,SAAA/E,GACL,OAAIA,EAAKrB,YAAcoG,EAAOpG,UACrB,KACFqB,EADL,CAEEb,SAAUa,EAAKb,UAGZa,IAYIJ,EATD,WAAmC,IAAlCO,EAAiC,uDAAzBuE,EAAcK,EAAW,uCAC9C,OAAQA,EAAOlG,MACb,IAAK,cACH,OAAOsB,EAAMJ,IAAI+E,EAAUC,IAC7B,QACE,OAAO5E,I,yjBC1Bb,IAAM6E,EAAQ,IAAIC,KAEZC,EAAe,CACnBvE,UAAW,CAAErB,MAAO0F,EAAMG,WAAa,EAAG5E,KAAMyE,EAAMI,eACtDxE,QAAS,CAAEtB,OAAQ0F,EAAMG,WAAa,GAAI,GAAK5E,KAAMyE,EAAMI,cAAe9E,UAAU0E,EAAMG,WAAa,GAAG,KAC1G5C,aAAc,MAoCD8C,EAlCA,WAAmC,IAAlClF,EAAiC,uDAAzB+E,EAAcH,EAAW,uCAC/C,OAAQA,EAAOlG,MACb,IAAK,cACH,OACEsB,EAAMoC,cACN+C,KAAKC,UAAUpF,EAAMoC,gBAAkB+C,KAAKC,UAAUpF,EAAMQ,WAErD,KACFR,EADL,CAEEQ,UAAWoE,EAAO/C,KAClBO,aAAc,OAGhBpC,EAAMoC,cACN+C,KAAKC,UAAUpF,EAAMoC,gBAAkB+C,KAAKC,UAAUpF,EAAMS,SAErD,KACFT,EADL,CAEES,QAASmE,EAAO/C,KAChBO,aAAc,OAGTpC,EAEX,IAAK,cACH,OAAO,KACFA,EADL,CAEEoC,aAAcwC,EAAO/C,OAEzB,QACE,OAAO7B,ICjCEqF,cAAgB,CAC7B5F,QACAc,U,oCCJQ+E,G,WAQOC,G,yjBARjB,SAAUD,EAAiBV,GAA3B,iEAKE,OAJAH,aAAae,QACXZ,EAAOpG,WACNoG,EAAOnG,kBAHZ,SAKQgH,YAAI,KAAKb,EAAN,CAAclG,KAAM,iBAL/B,uCAQO,SAAU6G,IAAV,iEACL,OADK,SACCG,YAAU,sBAAuBJ,GADlC,uC,eCRkBK,GAAV,SAAUA,IAAV,iEACX,OADW,SACLC,YAAI,CACNL,MAFO,uC,YCUKM,QACW,cAA7BC,OAAOzG,SAAS0G,UAEe,UAA7BD,OAAOzG,SAAS0G,UAEhBD,OAAOzG,SAAS0G,SAASC,MACvB,2D,UCPAC,EAAiBC,cACjBC,EAAmBL,OAAOM,sCAAwCC,IAClEC,GAAQC,YACZC,EAAaL,EACXM,YAAgBR,KAGpBA,EAAeS,IAAIf,GAEnBgB,iBACE,kBAAC,IAAD,CAAUL,MAAOA,IACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.12f921cc.chunk.js","sourcesContent":["export const changeDate = date => ({\n  type: \"CHANGE_DATE\",\n  date\n});\n\nexport const requestToggleShow = (headliner,currentlyTracked) => ({\n  type: \"REQUEST_TOGGLE_SHOW\",\n  headliner,\n  currentlyTracked\n});\nexport const toggleShow = headliner => ({\n  type: \"TOGGLE_SHOW\",\n  headliner\n});\nexport const selectDate = date => ({\n  type: \"SELECT_DATE\",\n  date\n});\n","import React from \"react\";\nimport './ShowListing.css'\n\nconst ShowListing = props => {\n    return (\n      <div onClick={props.onClick} style={{color: props.tracked ? 'gold':'white'}} className='ShowListing'>\n          <h2>{props.headliner}</h2>\n          <p>{props.otherBands}</p>\n          <p>{props.month}/{props.day}</p>\n          <p>{props.location}</p>\n          <p>\n            {props.description}\n          </p>\n      </div>\n    );\n}\n\nexport default ShowListing;","import React from \"react\";\nimport \"./ShowList.css\";\nimport ShowListing from \"../ShowListing/ShowLisitng\";\n\nconst ShowList = props => {\n  return (\n    <div style={{ display: (props.shows.length > 0 ? 'inherit' : 'none') }}>\n      <h1>{props.title}</h1>\n      <div className='horizontalRule' />\n      {props.shows &&\n        props.shows.map(show => {\n          return <ShowListing\n            key={show.headliner}\n            {...show}\n            onClick={() => props.onClick(show.headliner,show.tracked)}\n          />;\n        })}\n    </div>\n  );\n}\n\nexport default ShowList;\n","import { connect } from 'react-redux'\nimport { requestToggleShow } from '../actions'\nimport ShowList from '../components/ShowList/ShowList'\n\n\nconst mapStateToProps = state => ({\n  shows: state.shows.filter((show) => show.tracked === true),\n  title: 'Tracked' \n})\n\nconst mapDispatchToProps = dispatch => ({\n  onClick: (headliner,currentlyTracked) => dispatch(requestToggleShow(headliner,currentlyTracked))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ShowList)","import { connect } from \"react-redux\";\nimport { requestToggleShow } from \"../actions\";\nimport ShowList from \"../components/ShowList/ShowList\";\n\nconst showWithinDateFilter = ((show, state) => {\n  return (\n    parseInt(show.year + \"\" + show.month.toString().padStart(2,'0')) >=\n      parseInt(state.dates.startDate.year + \"\" + state.dates.startDate.month.toString().padStart(2,'0')) &&\n    parseInt(show.year + \"\" + show.month) <=\n      parseInt(state.dates.endDate.year + \"\" + state.dates.endDate.month.toString().padStart(2,'0'))\n  );\n})\n\nconst mapStateToProps = state => ({\n  shows: state.shows.filter(show => show.tracked === false && showWithinDateFilter(show,state)),\n  title: \"Untracked\"\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClick: (headliner,currentlyTracked) => dispatch(requestToggleShow(headliner,currentlyTracked))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ShowList);\n","import React from \"react\";\nimport './TimelineNode.css';\nconst monthMap = {\n  1:'jan',\n  2:'feb',\n  3:'mar',\n  4:'apr',\n  5:'may',\n  6:'jun',\n  7:'jul',\n  8:'aug',\n  9:'sep',\n  10:'oct',\n  11:'nov',\n  12:'dec'\n}\nclass TimelineNode extends React.Component {\n  render() {\n    let nodeClass = this.props.active ? \"nodeSelected\" : \"node\";\n    if(this.props.selectable){\n      nodeClass += \" selectAvailible\";\n    }\n    return (\n      <div className={\"nodeContainer\"} onClick={this.props.onClick}>\n        <div className={nodeClass}></div>\n        <span className=\"nodeLabel\">{monthMap[this.props.date.month]}</span>\n      </div>\n    );\n  }\n}\n\nexport default TimelineNode;\n","import React from 'react';\nimport './TimelineConnector.css';\n\nconst TimelineConnector = props => {\n    return (\n        <div className='line'></div>\n    )\n}\n\nexport default TimelineConnector;","import React from \"react\";\nimport \"./Timeline.css\";\nimport TimelineNode from \"../TimelineNode/TimelineNode\";\nimport TimelineConnector from \"../TimelineConnector/TimeLineConnector\";\n\nconst Timeline = props => {\n  const isActive = date => {\n    return (\n      (date.month === props.startDate.month &&\n        date.year === props.startDate.year) ||\n      (date.month === props.endDate.month &&\n        date.year === props.endDate.year)\n    );\n  };\n  const getOnClick = date => {\n\n    if (props.selectedDate != null) {\n      return () => {\n        props.onClickConfirm(date);\n      }\n    }\n    else if (isActive(date)) {\n      return () => {\n        props.onClickSelect(date);\n      }\n    } else {\n      return () => {\n      }\n    }\n  }\n  return (\n    <div className=\"timelineContainer\">\n      {props.dates &&\n        props.dates.map((date, index) => {\n          return (\n            <div className=\"timelineContainer\" key={date.month + '-' + date.year}>\n              <TimelineNode\n                key={date.month + \"-\" + date.year + Math.random()}\n                selectable={props.selectedDate != null}\n                active={isActive(date)}\n                onClick={getOnClick(date)}\n                selected={\n                  props.selectedDate &&\n                  date.month === props.selectedDate.month &&\n                  date.year === props.selectedDate.year\n                }\n                date={date}\n              />\n              {index < props.dates.length - 1 ? (\n                <TimelineConnector\n                  key={date.month + \"-\" + date.year + \"-\" + Math.random()}\n                />\n              ) : null}\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default Timeline;\n","import { connect } from \"react-redux\";\nimport TimeLine from \"../components/TimeLine/Timeline\";\nimport { selectDate,changeDate } from '../actions'\n\nconst getRequiredDates = state => {\n  let showDates = state.shows\n    .map(show => {\n      return {\n        month: show.month,\n        year: show.year\n      };\n    })\n    .sort((a, b) => {\n      return parseInt(a.year + \"\" + a.month.toString().padStart(2,'0')) > parseInt(b.year + \"\" + b.month.toString().padStart(2,'0'))\n        ? 1\n        : -1;\n    });\n  showDates = [showDates[0], showDates[showDates.length - 1]].reduce(\n    (allDates, currentdate) => {\n      if (allDates.length === 0) {\n        return [currentdate];\n      } else {\n        let numberOfMonths =\n          12 * (currentdate.year - allDates.slice(-1)[0].year);\n        numberOfMonths += currentdate.month - allDates.slice(-1)[0].month;\n        let allDatesFilled = [...new Array(numberOfMonths)].map(\n          (fillDate, index) => {\n            let newMonth = allDates.slice(-1)[0].month + index;\n            return {\n              month: (newMonth % 12)+1,\n              year: allDates.slice(-1)[0].year + parseInt(newMonth / 12)\n            };\n          }\n        );\n        return [...allDates,...allDatesFilled];\n      }\n    },\n    []\n  );\n  return showDates;\n};\n\nconst mapStateToProps = state => ({\n  dates: getRequiredDates(state),\n  ...state.dates\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickSelect: date => dispatch(selectDate(date)),\n  onClickConfirm: date => dispatch(changeDate(date))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimeLine);\n","import React from \"react\";\nimport \"./Navbar.css\";\nimport TimeFilter from \"../../containers/TimeFilter\";\n\nconst Navbar =  () => {\n  return (\n    <div>\n      <div className=\"Navbar\">\n        <h1 className=\"navbarTitle\">Shows To Look Out For</h1>\n        <div className='playButton'>\n          <iframe\n            title='playlist'\n            src=\"https://open.spotify.com/embed/playlist/4IjrjeUI5eJKnwS2mcxNv7?si=QlCP49CyR36tXUe-KKDY-A\"\n            width=\"300\"\n            height=\"80\"\n            frameborder=\"0\"\n            allowtransparency=\"true\"\n            allow=\"encrypted-media\"\n          ></iframe>\n        </div>\n        <TimeFilter />\n      </div>\n      <div className=\"initialBuffer\" />\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './App.css';\nimport TrackedShows from '../containers/TrackedShows';\nimport UntrackedShows from '../containers/UntrackedShows';\nimport Navbar from '../components/NavBar/NavBar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <TrackedShows/>\n      <UntrackedShows/>\n    </div>\n  );\n}\n\nexport default App;\n","const initialShows = require(\"./initialShowState.json\").map(show => {\n  //getting data from local storage\n  //TODO this probably isn't right but it works\n  return {\n    ...show,\n    tracked: localStorage.getItem(show.headliner)  === 'true'\n  } \n });\n//-----------------ACTUAL REDUCERS ------------------------//\n\nconst trackShow = action => {\n  return show => {\n    if (show.headliner === action.headliner) {\n      return {\n        ...show,\n        tracked: !show.tracked\n      };\n    }\n    return show;\n  };\n};\nconst shows = (state = initialShows, action) => {\n  switch (action.type) {\n    case \"TOGGLE_SHOW\":\n      return state.map(trackShow(action));\n    default:\n      return state;\n  }\n};\n\nexport default shows;\n","const today = new Date();\n\nconst initialDates = {\n  startDate: { month: today.getMonth() + 1, year: today.getFullYear() },\n  endDate: { month: (today.getMonth() + 4) %12 , year: today.getFullYear() +parseInt((today.getMonth() + 4)/12)},\n  selectedDate: null\n};\nconst Months = (state = initialDates, action) => {\n  switch (action.type) {\n    case \"CHANGE_DATE\":\n      if (\n        state.selectedDate &&\n        JSON.stringify(state.selectedDate) === JSON.stringify(state.startDate)\n      ) {\n        return {\n          ...state,\n          startDate: action.date,\n          selectedDate: null\n        };\n      } else if (\n        state.selectedDate &&\n        JSON.stringify(state.selectedDate) === JSON.stringify(state.endDate)\n      ) {\n        return {\n          ...state,\n          endDate: action.date,\n          selectedDate: null\n        };\n      } else {\n        return state;\n      }\n    case \"SELECT_DATE\":\n      return {\n        ...state,\n        selectedDate: action.date\n      };\n    default:\n      return state;\n  }\n};\n\nexport default Months;\n","import { combineReducers } from 'redux'\nimport shows from './shows'\nimport dates from './dates'\n\nexport default combineReducers({\n  shows,\n  dates\n})","import { put, takeEvery } from 'redux-saga/effects'\n\nfunction* showLocalStorage(action) {\n  localStorage.setItem(\n    action.headliner,\n    !action.currentlyTracked\n  );\n  yield put({ ...action, type: 'TOGGLE_SHOW' })\n}\n\nexport function* watchShowLocalStorage() {\n  yield takeEvery('REQUEST_TOGGLE_SHOW', showLocalStorage)\n}","import {watchShowLocalStorage} from './ShowLocalStorage'\nimport { all } from 'redux-saga/effects'\nexport default function *rootSaga(){\n    yield all([\n        watchShowLocalStorage()\n    ])\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\nimport rootSaga from './sagas'\nimport createSagaMiddleware from 'redux-saga'\nimport * as serviceWorker from \"./serviceWorker\";\nimport './index.css';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer, composeEnhancers(\n    applyMiddleware(sagaMiddleware)\n  )\n);\nsagaMiddleware.run(rootSaga);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\nserviceWorker.unregister();"],"sourceRoot":""}